width = 8, height =6,
units = "in",
path = "../figures")
net_size
#------------------------------
#  Distance between centers
#     as a function of t
#-----------------------------
ggplot(plotdf %>% filter(net_size == 250), aes(t, Dist, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
geom_ribbon(aes(ymin=Dist - dist_se,
ymax=Dist + dist_se),
alpha=0.2, linetype = 0)+
labs(x = "t",
y = "Distance between Centroids")+
theme_bw()
ggsave(filename = "distance_by_t.pdf",
width = 8, height =6,
units = "in",
path = "../figures")
#------------------------------
#  MC Rate by Distance
#-----------------------------
library(ggplot2)
ggplot(plotdf %>% filter(t == 0.1), aes(Dist, MC_Rate, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
scale_x_sqrt()+
scale_y_sqrt()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
ggplot(plotdf %>% filter(t == 0.5), aes(Dist, MC_Rate, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
scale_x_sqrt()+
scale_y_sqrt()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
ggplot(plotdf %>% filter(t == 0.4), aes(Dist, MC_Rate, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
scale_x_sqrt()+
scale_y_sqrt()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
ggplot(plotdf %>% filter(t == 0.5), aes(Dist, MC_Rate, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
scale_x_sqrt()+
scale_y_sqrt()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
ggplot(plotdf %>% filter(t == 0.5), aes(Dist, MC_Rate, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
#  scale_x_sqrt()+
scale_y_sqrt()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
ggplot(plotdf %>% filter(t == 0.5), aes(Dist, MC_Rate, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
#  scale_x_sqrt()+
scale_y_sqrt()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
ggplot(plotdf %>% filter(t == 0.5), aes(Dist, MC_Rate, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
#  scale_x_sqrt()+
#scale_y_sqrt()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
ggplot(plotdf %>% filter(t == 0.5), aes(Dist, MC_Rate, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
scale_x_sqrt()+
scale_y_sqrt()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
ggsave(filename = "mc_rate_by_distance.pdf",
width = 8, height =6,
units = "in",
path = "../figures")
ggplot(plotdf %>% filter(t == 0.9), aes(net_size,Dist, col = Method))+
geom_point()+
geom_line()+
facet_grid(~Graph)+
scale_x_log10()+
#geom_ribbon(aes(ymin=MC_Rate - mc_se,
#                ymax=MC_Rate + mc_se),
#            alpha=0.1, linetype = 0)+
# labs(x = "Distance between Centroids", y = "Misclassification Rate")+
theme_bw()
P1
P2
Ptil <- make_omni(P1, P2)
dim(Ptil)
library(Matrix)
?rankMatrix
rankMatrix(Ptil)
j
j < - 3
j < - 2
j <- 2
P3 <- tcrossprod(X %*% C(t[j]), X)
mats <- list()
mats[[1] <- P1]
mats[[1] <- P1
mats[[1]] <- P1
mats[[2]] <- P2
mats[[3]] <- P3
m <- length(mats)
sapply(1:m, function(x) kronecker(H(x,2), mats[[x]]))
1:m
sapply(1:m, function(x) kronecker(H(x,m), mats[[x]]))
dim(sapply(1:m, function(x) kronecker(H(x,m), mats[[x]])) )
lapply(1:m, 1, function(x) kronecker(H(x,m), mats[[x]]))
lapply(1:m, function(x) kronecker(H(x,m), mats[[x]]))
dim(lapply(1:m, function(x) kronecker(H(x,m), mats[[x]])))
length(lapply(1:m, function(x) kronecker(H(x,m), mats[[x]])))
Reduce("+", lapply(1:m, function(x) kronecker(H(x,m), mats[[x]])))
dim(Reduce("+", lapply(1:m, function(x) kronecker(H(x,m), mats[[x]]))))
net_size
make_omni2 <- function(mats){
m <- length(mats)
Reduce("+", lapply(1:m, function(x) kronecker(H(x,m), mats[[x]])))
}
rankMatrix(make_omni2(mats))
mats[[4]] < - X %*% C(t[3]) %*% t(X)
mats[[4]] < - X %*% C(t[3]) %*% t(X)
length(mats)
mats <- list()
mats[[1]] <- P1
mats[[2]] <- P2
mats[[3]] <- P3
mats[[4]] <- P4
mats[[4]] <- X %*% C(t[3]) %*% t(X)
make_omni2(mats)
rankMatrix(make_omni2(mats))
source("~/Desktop/paper_figures/multiple_network_methods/code/basic_functions.R")
Atil
dim(Atil)
#get embedding
Xhat <- ase(Atil, d)
d = 2
#get embedding
Xhat <- ase(Atil, d)
Xhat
n
plot(Xhat)
plot(Xhat, col = samp )
dev.off()
#get [I I ... I]^T which is nm x n stack of I(nxn) matrices
I_stack <- kronecker(rep(1, m), diag(m))
I_stack
m
m <- 2
n <- 250
?diag
#get [I I ... I]^T which is nm x n stack of I(nxn) matrices
I_stack <- kronecker(rep(1, m), diag(m)/m)
I_stack
#get sum of each entry
Xbar <- crossprod(Im_stack, Xhat)
#get 1/m * [I I ... I]^T which is nm x n stack of 1/m*I(nxn) matrices
Im_stack <- kronecker(rep(1, m), diag(m)/m)
#get sum of each entry
Xbar <- crossprod(Im_stack, Xhat)
dim(Im_stack)
n
#get 1/m * [I I ... I]^T which is nm x n stack of 1/m*I(nxn) matrices
Im_stack <- kronecker(rep(1, m), diag(n)/m)
dim(Im_stack)
#get sum of each entry
Xbar <- crossprod(Im_stack, Xhat)
Xbar
Xbar <- .5*(Xhat[1:250, ] + Xhat[251:500, ])
#get sum of each entry
Xbar <- crossprod(Im_stack, Xhat)
Xbar == .5*(Xhat[1:250, ] + Xhat[251:500, ])
?kmeans
K = 2
plot(Xbar)
#cluster based on k means
clusters <- kmeans(Xbar, centers = K)
clusters
#cluster based on k means
clusters <- kmeans(Xbar, centers = K)$vector
clusters
names(clusters)
#cluster based on k means
clusters <- kmeans(Xbar, centers = K)
names(clusters)
#cluster based on k means
clusters <- kmeans(Xbar, centers = K)$cluster
clusters
plot(Xbar, col = clusters)
#get graph level ASE
V <- do.call("cbind", lapply(adj_matrices, function(x), ase(x,d)))
#get graph level ASE
V <- do.call("cbind", lapply(adj_matrices, function(x) ase(x,d)))
adj_matrices <- list()
adj_matrices[[1]] <- A1
adj_matrices[[2]] <- A2
#get graph level ASE
V <- do.call("cbind", lapply(adj_matrices, function(x) ase(x,d)))
#get graph level ASE
U <- do.call("cbind", lapply(adj_matrices, function(x) ase(x,d)))
dim(U)
?svd
#get leading left singular vectors
V <- svd(U, nu = d, nv = 0)
V
plot(V)
#get leading left singular vectors
V <- svd(U, nu = d, nv = 0)$u
plot(V)
rep(diag(d), m)
d
diag(d)
rep(diag(d), m)
#initialize Lambda_g for g = 1, 2, ..., m
Lambda <- list(diag(d))
diag(d)
rep(list(diag(d)))
rep(list(diag(d)), 2)
matrix(0, nrow = n - d, ncol = d)
#Initialize U_old to be an orthogonal n x d matrix
U_old <- rbind(diag(d), matrix(0, nrow = n - d, ncol = d))
tcrossprod(U_old)
crossprod(U_old)
A <- A1
#get eigendecomposition of A
eigen_system <- eigen(A)
#threshold values
D_plus <- diag(plus(eigen_system$values))
#some helpful functions for MRDPG
plus <- function(x) max(c(x,0))
#threshold values
D_plus <- diag(plus(eigen_system$values))
?tcrossprod
#some helpful functions for MRDPG
plus <- function(x) max(c(x,0))
A_plus <- function(A){
#get eigendecomposition of A
eigen_system <- eigen(A)
#threshold values
D_plus <- diag(plus(eigen_system$values))
#return A plus
eigen_system$vectors %*% tcrossprod(Dplus, eigen_system$vectors)
}
get_A_plus <- function(A){
#get eigendecomposition of A
eigen_system <- eigen(A)
#threshold values
D_plus <- diag(plus(eigen_system$values))
#return A plus
eigen_system$vectors %*% tcrossprod(Dplus, eigen_system$vectors)
}
#Get A^g+
A_plus <- lapply(adj_matrices, get_A_plus)
#some helpful functions for MRDPG
plus <- function(x) max(c(x,0))
get_A_plus <- function(A){
#get eigendecomposition of A
eigen_system <- eigen(A)
#threshold values
D_plus <- diag(plus(eigen_system$values))
#return A plus
eigen_system$vectors %*% tcrossprod(D_plus, eigen_system$vectors)
}
#Get A^g+
A_plus <- lapply(adj_matrices, get_A_plus)
#get eigendecomposition of A
eigen_system <- eigen(A)
#threshold values
D_plus <- diag(plus(eigen_system$values))
#return A plus
eigen_system$vectors %*% tcrossprod(D_plus, eigen_system$vectors)
dim(D_plus)
dim(eigen_system$vectors)
eigen_system$values
#some helpful functions for MRDPG
plus <- function(x) max(c(x,0))
plus(eigen_system$values)
diag(sapply(eigen_system$values, plus))
diag(diag(sapply(eigen_system$values, plus)))
#threshold values
D_plus <- diag(sapply(eigen_system$values, plus))
#get eigendecomposition of A
eigen_system <- eigen(A)
#threshold values
D_plus <- diag(sapply(eigen_system$values, plus))
#return A plus
eigen_system$vectors %*% tcrossprod(D_plus, eigen_system$vectors)
get_A_plus <- function(A){
#get eigendecomposition of A
eigen_system <- eigen(A)
#threshold values
D_plus <- diag(sapply(eigen_system$values, plus))
#return A plus
eigen_system$vectors %*% tcrossprod(D_plus, eigen_system$vectors)
}
#Get A^g+
A_plus <- lapply(adj_matrices, get_A_plus)
?prop.test
dim(U_old)
dim(A_plus[[1]])
Lambda[[1]]
Lambda
Lambda %*% matrix(c(0,1,1,0), nrow = 2)
do.call("cbind", lapply(A_plys, function(x) x %*% U_old))
do.call("cbind", lapply(A_plus, function(x) x %*% U_old))
dim(do.call("cbind", lapply(A_plus, function(x) x %*% U_old)))
do.call("cbind", lapply(A_plus, function(x) x %*% U_old)) %% do.call(Lambda, "rbind")
do.call("cbind", lapply(A_plus, function(x) x %*% U_old)) %*% do.call("rbind", Lambda)
do.call("rbind", Lambda)
Lambda
m
#initialize Lambda_g = I  for g = 1, 2, ..., m
Lambda <- rep(list(diag(d)), m)
lambda
Lambda
do.call("rbind", Lambda)
do.call("cbind", lapply(A_plus, function(x) x %*% U_old)) %*% do.call("rbind", Lambda)
dim(do.call("cbind", lapply(A_plus, function(x) x %*% U_old)) %*% do.call("rbind", Lambda))
#get Z matrices
Z <- lapply(A_plus, function(x) crossprod(U, x) %*% U)
#update Lambdas
Lambda_new <- lapply(Z, function(z) diag(sapply(diag(x), plus)))
Lambda_new[[1]]
dim(Z[[1]])
diag(Z[[1]])
sapply(diag(Z[[1]]), plus)
diag(sapply(diag(Z[[1]]), plus))
#update Lambdas
Lambda_new <- lapply(Z, function(z) diag(sapply(diag(z), plus)))
Lambda_new[[1]]
?norm
adj_matrices
length(adj_matrices)
mrdpg_U(adj_matrices, d = 2)
mrdpg_U <- function(adj_matrices, d){
#get basic parameters
n <- dim(adj_matrices[[1]])[1]
m <- length(adj_matrices)
#initialize Lambda_g = I  for g = 1, 2, ..., m
Lambda <- rep(list(diag(d)), m)
#Initialize U_old to be an orthogonal n x d matrix
U_old <- rbind(diag(d), matrix(0, nrow = n - d, ncol = d))
#Get A^g+
A_plus <- lapply(adj_matrices, get_A_plus)
#set convergence criterion
conv.crit <- Inf
#begin iteration
while(conv.crit > 1e-6){
#want to create the sum of ( A_+^g * U_old * Lambda_g)
sum_mat <- do.call("cbind", lapply(A_plus, function(x) x %*% U_old)) %*% do.call("rbind", Lambda)
#get SVD and set B and C
svd_sum_mat <- svd(sum_mat)
B <- svd_sum_mat$u
C <- svd_sum_mat$v
#update U
U <- tcrossprod(B, C)
#get Z matrices
Z <- lapply(A_plus, function(x) crossprod(U, x) %*% U)
#update Lambdas
Lambda_new <- lapply(Z, function(z) diag(sapply(diag(z), plus)))
#update convergence criterion
conv.crit <- norm(U_old - U, type = "F")/norm(U_old, type = "F")
#update U
U_old <- U
}
}
mrdpg_U(adj_matrices, d = 2)
mrdpg_U <- function(adj_matrices, d){
#get basic parameters
n <- dim(adj_matrices[[1]])[1]
m <- length(adj_matrices)
#initialize Lambda_g = I  for g = 1, 2, ..., m
Lambda <- rep(list(diag(d)), m)
#Initialize U_old to be an orthogonal n x d matrix
U_old <- rbind(diag(d), matrix(0, nrow = n - d, ncol = d))
#Get A^g+
A_plus <- lapply(adj_matrices, get_A_plus)
#set convergence criterion
conv.crit <- Inf
#begin iteration
while(conv.crit > 1e-6){
#want to create the sum of ( A_+^g * U_old * Lambda_g)
sum_mat <- do.call("cbind", lapply(A_plus, function(x) x %*% U_old)) %*% do.call("rbind", Lambda)
#get SVD and set B and C
svd_sum_mat <- svd(sum_mat)
B <- svd_sum_mat$u
C <- svd_sum_mat$v
#update U
U <- tcrossprod(B, C)
#get Z matrices
Z <- lapply(A_plus, function(x) crossprod(U, x) %*% U)
#update Lambdas
Lambda_new <- lapply(Z, function(z) diag(sapply(diag(z), plus)))
#update convergence criterion
conv.crit <- norm(U_old - U, type = "F")/norm(U_old, type = "F")
#update U
U_old <- U
}
return(U_old)
}
mrdpg_U(adj_matrices, d = 2)
plot(mrdpg_U(adj_matrices, d = 2))
plot(mrdpg_U(adj_matrices, d = 2), col = samp )
mrdpg_classes <- function(adj_matrices, d, K){
#get commom eigen space
U <- mrdpg_U(adj_matrices, d)
#kmeans on the rows of U
classes <- kmeans(U, centers = K)
#return classes
return(classes)
}
mase_classes(adj_matrices, 2, 2)
mase_classes <- function(adj_matrices, d, K){
#get graph level ASE
U <- do.call("cbind", lapply(adj_matrices, function(x) ase(x,d)))
#get leading left singular vectors
V <- svd(U, nu = d, nv = 0)$u
#cluster
clusters <- kmeans(V, centers = K)
#return clusters
return(clusters)
}
mase_classes(adj_matrices, 2, 2)
# Simulate data ###################
h1 <- rep(1,200) / sqrt(200)
h2 <- rep(c(1,-1),100)/sqrt(200)
h3 <- rep(c(1,1,-1,-1), 50) / sqrt(200)
m <- 2^10
lambda1 <- runif(n = m, 8,16)
lambda2 <- runif(n = m,  0,2)
lambda3 <- runif(n = m, 0,1)
H1 <- tcrossprod(h1)
H2 <- tcrossprod(h2)
H3 <- tcrossprod(h3)
l1 = lambda1[1]
l2 = lambda2[1]
l3 = lambda3[1]
generate_graph <- function(l1,l2,l3) {
P <- l1*H1 + l2*H2 + l3*H3
P <- ifelse(P>1, 1, ifelse(P<0, 0, P))
P.updi <- P[upper.tri(P)]
A.updi <- 1*(runif(length(P.updi))<P.updi)
A <- matrix(0, 200, 200)
A[upper.tri(A)] <- A.updi
A <- A + t(A)
A
}
A.list <- mapply(generate_graph, lambda1, lambda2, lambda3,   SIMPLIFY = FALSE)
length(A.list)
#### joint embedding
source("joint_embedding.R")
#### joint embedding
source("~/Desktop/paper_figures/multiple_network_methods/code/joint_embedding.R")
je.A1 <- multidembed(A = A.list, d = 3, Innitialize = 1, maxiter = 100, large.and.sparse = F)
library(irlbda)
install.packages("irlbda")
install_github("bwlewis/irlba")
library("devtools")
install_github("bwlewis/irlba")
#### joint embedding
source("~/Desktop/paper_figures/multiple_network_methods/code/joint_embedding.R")
je.A1 <- multidembed(A = A.list, d = 3, Innitialize = 1, maxiter = 100, large.and.sparse = F)
library(irlbda)
install.packages("irlbda")
library(installr)
updateR()
install.packages("installr")
version()
version
