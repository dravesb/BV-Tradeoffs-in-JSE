X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(Y_hat - Xc, 1, get_mse)
#store
df[start:stop, ] <- cbind(rep(i, chunk_size), #iteration number
rep(t[j], chunk_size), #t
rep(1:net_size, 2), #node id
rep(c('Graph 1', 'Graph 2'), each = net_size), #graph id
rep(comm_ids, 2), #community ids
rep('ASE', chunk_size), #Method
rbind(X_hat, Y_hat), #estimate
rbind(X_bias, Y_bias), #observed bias
c(X_mse, Y_mse),  #observed MSE
ase_bias(X, C_list), #theoretical bias
ase_var(X, C_list), #theoretical variance
ase_mse(net_size, X, C_list) # theoretical MSE
)
#update pointers
start <- stop + 1
stop <- start + chunk_size - 1
#----------------------
#   Abar
#----------------------
#embedd A bar
X_hat.here <- ase((A1 + A2)/2, 2)
#align matrices
X_hat <- procrustes(X_hat.here, X)$X.new
#get rowwise bias
X_bias <- X_hat - X
Y_bias <- X_hat - Xc
#get rowwise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(X_hat - Xc, 1, get_mse)
#store
df[start:stop, ] <- cbind(rep(i, chunk_size), #iteration number
rep(t[j], chunk_size), #t
rep(1:net_size, 2), #node id
rep(c('Graph 1', 'Graph 2'), each = net_size), #graph id
rep(comm_ids, 2), #community ids
rep('Abar', chunk_size), #Method
rbind(X_hat, X_hat), #estimate
rbind(X_bias, Y_bias), #observed bias
c(X_mse, Y_mse),  #observed MSE
abar_bias(X, C_list), #theoretical bias
abar_var(X, C_list), #theoretical variance
abar_mse(net_size, X, C_list) # theoretical MSE
)
#update pointers
start <- stop + 1
stop <- start + chunk_size - 1
#----------------------
#   Omni
#----------------------
#construct Omni + embed
Atil <- make_omni(list(A1, A2))
L_hat.here <- ase(Atil, 2)
#align matrices
L_hat <- procrustes(L_hat.here, X.scaled)$X.new
X_hat <- L_hat[1:(net_size),]
Y_hat <- L_hat[(net_size+1):(2*net_size),]
#get rowwise bias
X_bias <- X_hat - X
Y_bias <- Y_hat - Xc
#getrowise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(Y_hat - Xc, 1, get_mse)
#store
df[start:stop, ] <- cbind(rep(i, chunk_size), #iteration number
rep(t[j], chunk_size), #t
rep(1:net_size, 2), #node id
rep(c('Graph 1', 'Graph 2'), each = net_size), #graph id
rep(comm_ids, 2), #community ids
rep('Omni', chunk_size), #Method
rbind(X_hat, Y_hat), #estimate
rbind(X_bias, Y_bias), #observed bias
c(X_mse, Y_mse),  #observed MSE
omni_bias(X, C_list, S_list), #theoretical bias
omni_var(X, C_list, S_list), #theoretical variance
omni_mse(net_size, X, C_list, S_list) # theoretical MSE
)
#update pointers
start <- stop + 1
stop <- start + chunk_size - 1
#----------------------
#   Omnibar
#----------------------
#get average
Lmean <- .5*(X_hat + Y_hat)
#get rowwise bias
X_bias <- Lmean - X
Y_bias <- Lmean - Xc
#get rowwise mse
X_mse <- apply(Lmean - X, 1, get_mse)
Y_mse <- apply(Lmean - Xc, 1, get_mse)
#store
df[start:stop, ] <- cbind(rep(i, chunk_size), #iteration number
rep(t[j], 2*net_size), #t
rep(1:net_size, 2), #node id
rep(c('Graph 1', 'Graph 2'), each = net_size), #graph id
rep(comm_ids, 2), #community ids
rep('Omnibar', chunk_size), #Method
rbind(Lmean, Lmean), #estimate
rbind(X_bias, Y_bias), #observed bias
c(X_mse, Y_mse),  #observed MSE
omnibar_bias(X, C_list, S_list), #theoretical bias
omnibar_var(X, C_list, S_list), #theoretical variance
omnibar_mse(net_size, X, C_list, S_list) # theoretical MSE
)
#update pointers
start <- stop + 1
stop <- start + chunk_size - 1
}
#print update
print(j/length(t))
}
#------------------------------
#
#       Data Prep
#
#-----------------------------
#restructure dataframe
plotdf <- data.frame(iter_no = as.factor(df[,1]),
t = as.numeric(df[,2]),
node_id = as.factor(df[,3]),
graph = as.factor(df[,4]),
comm = as.numeric(df[,5]),
method = as.factor(df[,6]),
estimate_X = as.numeric(df[,7]),
estimate_Y = as.numeric(df[,8]),
bias_X = as.numeric(df[,9]),
bias_Y = as.numeric(df[,10]),
mse = as.numeric(df[,11]),
theo_bias_X = as.numeric(df[,12]),
theo_bias_Y = as.numeric(df[,13]),
theo_var = as.numeric(df[,14]),
theo_mse = as.numeric(df[,15])) %>%
group_by(node_id, graph, method, t) %>%
summarize(comm = mean(comm),
bias_X = mean(bias_X),
bias_Y = mean(bias_Y),
theo_bias_X = mean(theo_bias_X),
theo_bias_Y = mean(theo_bias_Y),
average_mse = mean(mse),
average_estimate_X = mean(estimate_X),
average_estimate_Y = mean(estimate_Y),
average_bias2 = mean(bias_X^2 + bias_Y^2),
empirical_var = sum(diag(var(cbind(estimate_X, estimate_Y)))),
theo_bias2 = mean(theo_bias_X^2 + theo_bias_Y^2),
theo_var = mean(theo_var)/net_size,
theo_mse = mean(theo_mse))
#write out data
write.csv(plotdf, "~/Documents/Work/github/BJSE/two_dim_BV_tradeoff/data/plotting_df.csv")
#set up basics
pacman::p_load(ggplot2, dplyr)
setwd('/Users/benjamindraves/Documents/Work/github/BJSE/two_dim_BV_tradeoff/data/')
#read in data
plotdf <- read.csv("./plotting_df.csv")[,-1]
#plot MSE figure
ggplot() +
geom_point(aes(t, average_mse, col = method),
plotdf,
alpha = .5, size = .05)+
geom_line(aes(t, theo_mse,
col = method),
plotdf,
size = .5, alpha = .5)+
facet_grid(cols = vars(graph),
rows = vars(comm))+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "t",
color = 'Embedding\n Method')
#plot MSE figure
ggplot() +
geom_point(aes(t, average_mse, col = method),
plotdf %>% filter(method != 'Omnibar'),
alpha = .5, size = .05)+
geom_line(aes(t, theo_mse,
col = method),
plotdf %>% filter(method != 'Omnibar'),
size = .5, alpha = .5)+
facet_grid(cols = vars(graph),
rows = vars(comm))+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "t",
color = 'Embedding\n Method')
#plot bias figure
ggplot()+
geom_line(aes(t, theo_bias2, color = method, group = interaction(node_id, method)),
alpha = .1, size = .5,
plotdf)+
geom_point(aes(t, average_bias2, color = method, group = interaction(node_id, method)),
alpha = .3, size = .1,
plotdf)+
facet_grid(cols = vars(graph),
rows = vars(comm))+
theme_bw()+
scale_y_sqrt()+
labs(x = 't', y = expression(paste('Bias'^2)),
color = 'Embedding\n Method')
dev.off()
#plot bias figure
ggplot()+
geom_line(aes(t, theo_bias2, color = method, group = interaction(node_id, method)),
alpha = .1, size = .5,
plotdf)+
geom_point(aes(t, average_bias2, color = method, group = interaction(node_id, method)),
alpha = .3, size = .1,
plotdf)+
facet_grid(cols = vars(graph),
rows = vars(comm))+
theme_bw()+
scale_y_sqrt()+
labs(x = 't', y = expression(paste('Bias'^2)),
color = 'Embedding\n Method')
#plot variance figure
ggplot()+
geom_line(aes(t, theo_var, color = method, group = interaction(node_id, method)),
alpha = .1, size = .5,
#plotdf)+
plotdf %>% filter(method %in% c('Omni', 'Omnibar')))+
geom_point(aes(t, empirical_var, color = method, group = interaction(node_id, method)),
alpha = .3, size = .1,
#plotdf)+
plotdf %>% filter(method %in% c('Omni', 'Omnibar')))+
facet_grid(cols = vars(graph),
rows = vars(comm))+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(Variance)")),
x = "t",
color = 'Embedding\n Method')
#-----------------------------------
#
#   2D MSE Visualizations
#
#-----------------------------------
#set up basics
pacman::p_load(ggplot2, dplyr)
setwd('/Users/benjamindraves/Documents/Work/github/BJSE/two_dim_BV_tradeoff/data/')
#read in data
plotdf <- read.csv("./plotting_df.csv")[,-1]
#plot MSE figure
ggplot() +
geom_point(aes(t, average_mse, col = method),
plotdf,
alpha = .5, size = .05)+
geom_line(aes(t, theo_mse,
col = method),
plotdf,
size = .5, alpha = .5)+
facet_grid(cols = vars(graph),
rows = vars(comm))+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "t",
color = 'Embedding\n Method')
ggsave(filename = "2d_mse.pdf",
width = 8, height = 6,
path = "~/Documents/Work/github/BJSE/two_dim_BV_tradeoff/figures/",
units = "in")
#plot bias figure
ggplot()+
geom_line(aes(t, theo_bias2, color = method, group = interaction(node_id, method)),
alpha = .1, size = .5,
plotdf)+
geom_point(aes(t, average_bias2, color = method, group = interaction(node_id, method)),
alpha = .3, size = .1,
plotdf)+
facet_grid(cols = vars(graph),
rows = vars(comm))+
theme_bw()+
scale_y_sqrt()+
labs(x = 't', y = expression(paste('Bias'^2)),
color = 'Embedding\n Method')
ggsave(filename = "2d_bias.pdf",
width = 8, height = 6,
path = "~/Documents/Work/github/BJSE/two_dim_BV_tradeoff/figures/",
units = "in")
#plot variance figure
ggplot()+
geom_line(aes(t, theo_var, color = method, group = interaction(node_id, method)),
alpha = .1, size = .5,
plotdf)+
#plotdf %>% filter(method %in% c('Omni', 'Omnibar')))+
geom_point(aes(t, empirical_var, color = method, group = interaction(node_id, method)),
alpha = .3, size = .1,
plotdf)+
#plotdf %>% filter(method %in% c('Omni', 'Omnibar')))+
facet_grid(cols = vars(graph),
rows = vars(comm))+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(Variance)")),
x = "t",
color = 'Embedding\n Method')
ggsave(filename = "2d_variance.pdf",
width = 8, height = 6,
path = "~/Documents/Work/github/BJSE/two_dim_BV_tradeoff/figures/",
units = "in")
#--------------------------------------
#
#       Two Dimensional MSE
#           Simulations
#
#--------------------------------------
#load packages and source files
library(pacman,lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
p_load(MCMCpack, ggplot2, dplyr, reshape2)
setwd('/Users/benjamindraves/Documents/Work/github/BJSE/two_dim_BV_tradeoff/code/')
source('basic_functions.R')
source('model_setup_ER_to_SBM.R')
source('theoretical_mse_functions.R')
#set up storage
here <- 1
df <- matrix(NA, nrow = 4*2*net_size*length(t)*mc_runs, ncol = 15)
colnames(df) <- c('iter_no','t','node_id', 'graph', 'comm', 'method',
'estimate_X', 'estimate_Y', 'bias_X', 'bias_Y', 'mse',
'theo_bias_X','theo_bias_Y','theo_var','theo_mse')
#set pointers
chunk_size <- net_size*2
start <- 1
stop <- chunk_size
#set seed
set.seed(1985)
for(j in 1:length(t)){
#set C list
C_list <- list()
C_list[[1]] <- diag(1, ncol = 2, nrow = 2)
C_list[[2]] <- C(t[j])
#get S list
S_list <- get_Slist(C_list)
#sample rows of X
comm_ids <- rep(1:2, each = net_size/2)
X <- L[comm_ids, ]
Xc <- X %*% sqrt(C(t[j]))
#set up scaled latent positions
X.scaled <- rbind(X, Xc)
#set up P matrices
P1 <- tcrossprod(X)
P2 <- tcrossprod(Xc)
for(i in 1:mc_runs){
#sample A1 and A2
A1 <- sampP(P1)
A2 <- sampP(P2)
#----------------------
#   ASE
#----------------------
#embedd individually
X_hat.here <- ase(A1, 2)
Y_hat.here <- ase(A2, 2)
#align matrices
X_hat <- procrustes(X_hat.here, X)$X.new
Y_hat <- procrustes(Y_hat.here, Xc)$X.new
#rowise bias
X_bias <- X_hat - X
Y_bias <- Y_hat - Xc
#rowise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(Y_hat - Xc, 1, get_mse)
#store
df[start:stop, ] <- cbind(rep(i, chunk_size), #iteration number
rep(t[j], chunk_size), #t
rep(1:net_size, 2), #node id
rep(c('Graph 1', 'Graph 2'), each = net_size), #graph id
rep(comm_ids, 2), #community ids
rep('ASE', chunk_size), #Method
rbind(X_hat, Y_hat), #estimate
rbind(X_bias, Y_bias), #observed bias
c(X_mse, Y_mse),  #observed MSE
ase_bias(X, C_list), #theoretical bias
ase_var(X, C_list), #theoretical variance
ase_mse(net_size, X, C_list) # theoretical MSE
)
#update pointers
start <- stop + 1
stop <- start + chunk_size - 1
#----------------------
#   Abar
#----------------------
#embedd A bar
X_hat.here <- ase((A1 + A2)/2, 2)
#align matrices
X_hat <- procrustes(X_hat.here, X)$X.new
#get rowwise bias
X_bias <- X_hat - X
Y_bias <- X_hat - Xc
#get rowwise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(X_hat - Xc, 1, get_mse)
#store
df[start:stop, ] <- cbind(rep(i, chunk_size), #iteration number
rep(t[j], chunk_size), #t
rep(1:net_size, 2), #node id
rep(c('Graph 1', 'Graph 2'), each = net_size), #graph id
rep(comm_ids, 2), #community ids
rep('Abar', chunk_size), #Method
rbind(X_hat, X_hat), #estimate
rbind(X_bias, Y_bias), #observed bias
c(X_mse, Y_mse),  #observed MSE
abar_bias(X, C_list), #theoretical bias
abar_var(X, C_list), #theoretical variance
abar_mse(net_size, X, C_list) # theoretical MSE
)
#update pointers
start <- stop + 1
stop <- start + chunk_size - 1
#----------------------
#   Omni
#----------------------
#construct Omni + embed
Atil <- make_omni(list(A1, A2))
L_hat.here <- ase(Atil, 2)
#align matrices
L_hat <- procrustes(L_hat.here, X.scaled)$X.new
X_hat <- L_hat[1:(net_size),]
Y_hat <- L_hat[(net_size+1):(2*net_size),]
#get rowwise bias
X_bias <- X_hat - X
Y_bias <- Y_hat - Xc
#getrowise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(Y_hat - Xc, 1, get_mse)
#store
df[start:stop, ] <- cbind(rep(i, chunk_size), #iteration number
rep(t[j], chunk_size), #t
rep(1:net_size, 2), #node id
rep(c('Graph 1', 'Graph 2'), each = net_size), #graph id
rep(comm_ids, 2), #community ids
rep('Omni', chunk_size), #Method
rbind(X_hat, Y_hat), #estimate
rbind(X_bias, Y_bias), #observed bias
c(X_mse, Y_mse),  #observed MSE
omni_bias(X, C_list, S_list), #theoretical bias
omni_var(X, C_list, S_list), #theoretical variance
omni_mse(net_size, X, C_list, S_list) # theoretical MSE
)
#update pointers
start <- stop + 1
stop <- start + chunk_size - 1
#----------------------
#   Omnibar
#----------------------
#get average
Lmean <- .5*(X_hat + Y_hat)
#get rowwise bias
X_bias <- Lmean - X
Y_bias <- Lmean - Xc
#get rowwise mse
X_mse <- apply(Lmean - X, 1, get_mse)
Y_mse <- apply(Lmean - Xc, 1, get_mse)
#store
df[start:stop, ] <- cbind(rep(i, chunk_size), #iteration number
rep(t[j], 2*net_size), #t
rep(1:net_size, 2), #node id
rep(c('Graph 1', 'Graph 2'), each = net_size), #graph id
rep(comm_ids, 2), #community ids
rep('Omnibar', chunk_size), #Method
rbind(Lmean, Lmean), #estimate
rbind(X_bias, Y_bias), #observed bias
c(X_mse, Y_mse),  #observed MSE
omnibar_bias(X, C_list, S_list), #theoretical bias
omnibar_var(X, C_list, S_list), #theoretical variance
omnibar_mse(net_size, X, C_list, S_list) # theoretical MSE
)
#update pointers
start <- stop + 1
stop <- start + chunk_size - 1
}
#print update
print(j/length(t))
}
#------------------------------
#
#       Data Prep
#
#-----------------------------
#restructure dataframe
plotdf <- data.frame(iter_no = as.factor(df[,1]),
t = as.numeric(df[,2]),
node_id = as.factor(df[,3]),
graph = as.factor(df[,4]),
comm = as.numeric(df[,5]),
method = as.factor(df[,6]),
estimate_X = as.numeric(df[,7]),
estimate_Y = as.numeric(df[,8]),
bias_X = as.numeric(df[,9]),
bias_Y = as.numeric(df[,10]),
mse = as.numeric(df[,11]),
theo_bias_X = as.numeric(df[,12]),
theo_bias_Y = as.numeric(df[,13]),
theo_var = as.numeric(df[,14]),
theo_mse = as.numeric(df[,15])) %>%
group_by(node_id, graph, method, t) %>%
summarize(comm = mean(comm),
bias_X = mean(bias_X),
bias_Y = mean(bias_Y),
theo_bias_X = mean(theo_bias_X),
theo_bias_Y = mean(theo_bias_Y),
average_mse = mean(mse),
average_estimate_X = mean(estimate_X),
average_estimate_Y = mean(estimate_Y),
average_bias2 = mean(bias_X^2 + bias_Y^2),
empirical_var = sum(diag(var(cbind(estimate_X, estimate_Y)))),
theo_bias2 = mean(theo_bias_X^2 + theo_bias_Y^2),
theo_var = mean(theo_var)/net_size,
theo_mse = mean(theo_mse))
#write out data
write.csv(plotdf, "~/Documents/Work/github/BJSE/two_dim_BV_tradeoff/data/plotting_df.csv")
