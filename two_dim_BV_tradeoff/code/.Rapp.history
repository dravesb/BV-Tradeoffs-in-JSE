get_mahalanobis <- function(X, Y){
#set up P matrices#
    P1 <- tcrossprod(X)#
    P2 <- tcrossprod(X %*% C(t[j]), X)#
      #sample A1 and A2 #
      A1 <- sampP(P1)#
      A2 <- sampP(P2)#
      #----------------------#
      #   ASE Clustering#
      #----------------------#
      #embedd individually #
      X_hat <- ase(A1, 2)#
      Y_hat <- ase(A2, 2)#
      plot(Y_hat, col = samp);get_mahalanobis(Y_hat[samp == 1,], Y_hat[samp == 2,])
}
get_mahalanobis <- function(X, Y){#
  #get sample sizes#
  nx <- nrow(X)#
  ny <- nrow(Y)#
  #get covariances#
  CX <- cov(X)#
  CY <- cov(Y)#
  CX <- cov(t(X))#
  CY <- cov(t(Y))#
  #pool covariances#
  C <- ((nx - 1)*CX + (ny - 1)*CY)/(nx + ny -2)#
  #get column means#
  xbar <- colMeans(X)#
  ybar <- colMeans(Y)#
  #return distance#
  return(mahalanobis(xbar - ybar, center = FALSE, C, inverted = TRUE))#
  #return average distance#
  #return(norm2(xbar - ybar))#
  #return average Mah distance#
  #return(0.5 *(mahalanobis(xbar - ybar, center = FALSE, CX, inverted = TRUE) + mahalanobis(xbar - ybar, center = FALSE, CY, inverted = TRUE)))#
  #take cholesky decomposition#
  #Rx <- chol(CX)#
  #Ry <- chol(CY)#
  #standarize variances#
  #xstan <- backsolve(Rx, xbar)#
  #ystan <- backsolve(Ry, ybar)#
  #get return distance#
  #norm2(xstan - ystan)#
}
#set up P matrices#
    P1 <- tcrossprod(X)#
    P2 <- tcrossprod(X %*% C(t[j]), X)#
      #sample A1 and A2 #
      A1 <- sampP(P1)#
      A2 <- sampP(P2)#
      #----------------------#
      #   ASE Clustering#
      #----------------------#
      #embedd individually #
      X_hat <- ase(A1, 2)#
      Y_hat <- ase(A2, 2)#
      plot(Y_hat, col = samp);get_mahalanobis(Y_hat[samp == 1,], Y_hat[samp == 2,])
get_mahalanobis <- function(X, Y){#
  #get sample sizes#
  nx <- nrow(X)#
  ny <- nrow(Y)#
  #get covariances#
  CX <- cov(X)#
  CY <- cov(Y)#
  #pool covariances#
  C <- ((nx - 1)*CX + (ny - 1)*CY)/(nx + ny -2)#
  #get column means#
  xbar <- colMeans(X)#
  ybar <- colMeans(Y)#
  #return distance#
  return(mahalanobis(xbar - ybar, center = FALSE, C, inverted = TRUE))#
  #return average distance#
  #return(norm2(xbar - ybar))#
  #return average Mah distance#
  #return(0.5 *(mahalanobis(xbar - ybar, center = FALSE, CX, inverted = TRUE) + mahalanobis(xbar - ybar, center = FALSE, CY, inverted = TRUE)))#
  #take cholesky decomposition#
  #Rx <- chol(CX)#
  #Ry <- chol(CY)#
  #standarize variances#
  #xstan <- backsolve(Rx, xbar)#
  #ystan <- backsolve(Ry, ybar)#
  #get return distance#
  #norm2(xstan - ystan)#
}
#set up P matrices#
    P1 <- tcrossprod(X)#
    P2 <- tcrossprod(X %*% C(t[j]), X)#
      #sample A1 and A2 #
      A1 <- sampP(P1)#
      A2 <- sampP(P2)#
      #----------------------#
      #   ASE Clustering#
      #----------------------#
      #embedd individually #
      X_hat <- ase(A1, 2)#
      Y_hat <- ase(A2, 2)#
      plot(Y_hat, col = samp);get_mahalanobis(Y_hat[samp == 1,], Y_hat[samp == 2,])
?chol
plot_normalize <- function(X, Y){
#plot projected points#
plot_normalize <- function(X, Y){#
  #get sample sizes#
  nx <- nrow(X)#
  ny <- nrow(Y)#
  #get covariances#
  CX <- cov(X)#
  CY <- cov(Y)#
  #pool covariances#
  C <- ((nx - 1)*CX + (ny - 1)*CY)/(nx + ny -2)#
  #get matrix square root#
  proj <- chol(solve(C))#
  #return the projected plots#
  return(plot(rbind(proj %*% X, proj %*% Y)))#
  #return distance#
  return(plot(proj))#
}
#set up P matrices#
    P1 <- tcrossprod(X)#
    P2 <- tcrossprod(X %*% C(t[j]), X)#
      #sample A1 and A2 #
      A1 <- sampP(P1)#
      A2 <- sampP(P2)#
      #----------------------#
      #   ASE Clustering#
      #----------------------#
      #embedd individually #
      X_hat <- ase(A1, 2)#
      Y_hat <- ase(A2, 2)#
      plot_normalize(Y_hat, col = samp);get_mahalanobis(Y_hat[samp == 1,], Y_hat[samp == 2,])
#set up P matrices#
    P1 <- tcrossprod(X)#
    P2 <- tcrossprod(X %*% C(t[j]), X)#
      #sample A1 and A2 #
      A1 <- sampP(P1)#
      A2 <- sampP(P2)#
      #----------------------#
      #   ASE Clustering#
      #----------------------#
      #embedd individually #
      X_hat <- ase(A1, 2)#
      Y_hat <- ase(A2, 2)#
      plot_normalize(Y_hat);get_mahalanobis(Y_hat[samp == 1,], Y_hat[samp == 2,])
#set up P matrices#
    P1 <- tcrossprod(X)#
    P2 <- tcrossprod(X %*% C(t[j]), X)#
      #sample A1 and A2 #
      A1 <- sampP(P1)#
      A2 <- sampP(P2)#
      #----------------------#
      #   ASE Clustering#
      #----------------------#
      #embedd individually #
      X_hat <- ase(A1, 2)#
      Y_hat <- ase(A2, 2)#
      plot_normalize(X_hat, Y_hat);get_mahalanobis(Y_hat[samp == 1,], Y_hat[samp == 2,])
55 * 4 - 25 * 6
6 * 24
6 * 4
70 /1
70 / 2
24/2
35/3
35/4
35/24
4/3
5 * 1/4
10 * 1/4
20 * 1/4
pbinom(3, 20, .5)
pnorm(3, 20 * .5, 20 *.5 * .5)
pbinom(3, 20, .5) - pnorm(3, 20 * .5, 20 *.5 * .5)
abs(pbinom(3, 20, .5) - pnorm(3, 20 * .5, 20 *.5 * .5))
pnorm(-1/sqrt(2))
-1/sqrt(2)
2/sqrt(2)
1 - pnorm(2/sqrt(2))
-2/sqrt(7)
pnorm(-2/sqrt(7))
2/sqrt(7)
1 - pnorm(2/sqrt(7))
-3/sqrt(5)
pnorm(-3/sqrt(5))
3/sqrt(5)
pnorm(3/sqrt(5))
1 - pnorm(3/sqrt(5))
pnorm(3/sqrt(5))
1 -pnorm(3/sqrt(5))
2 * (1 -pnorm(3/sqrt(5)))
-4/sqrt(12)
pnorm(-4/sqrt(12))
pnorm(4/sqrt(12))
4/sqrt(12)
1 - pnorm(4/sqrt(12))
n <- 53
n <- 53 #
p <- .7
n <- 53 #
p <- .7 #
#
center <- n*p#
variance <- n*p*(1 - p)
center
variance
(32.5 - center) / sqrt(variance)
(32.5 - center) / sqrt(variance)#
#
(31.5 - center) / sqrt(variance)
pnorm((32.5 - center) / sqrt(variance)) - pnorm((31.5 - center) / sqrt(variance))
pnorm(-1/2)
pnorm(1/2)
1 - pnorm(1/2)
50/(276/10)
pnorm(50/(276/10))
1 - pnorm(50/(276/10))
dat <- read.table("~/Desktop/exam_2.txt")
head(dat)
dat <- read.table("~/Desktop/exam_2.txt")[,1]
dat
hist(dat)
plot(density(dat))
hist(dat)
hist(dat, breaks = 20 )
plot(density(dat))
length*dat
length(dat)
length(which(dat > 90))
length(which(dat > 88))
length(which(dat > 88))/nrow(dat)
length(which(dat > 88))/length(dat)
se <- -qnorm(.999/2) * sqrt(p_hat * (1 - p_hat) / n)
p_hat <- s / n
n <- 153 #
s <- 52#
#
p_hat <- s / n #
se <- -qnorm(.999/2) * sqrt(p_hat * (1 - p_hat) / n)
p_hat
p_hat + se
se
qnorm(.001/2)
n <- 153 #
s <- 52#
#
p_hat <- s / n #
se <- -qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)
c(p_hat - se, p_hat + se)
s / n + -qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)
s / n - qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)
s / n + -qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)#
s / n + qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)
(1-.999)/2
s / n + -qnorm(5e-04) * sqrt(p_hat * (1 - p_hat) / n)#
s / n + qnorm(5e-04) * sqrt(p_hat * (1 - p_hat) / n)
qnorm(5e-04)
-qnorm(5e-04)
p_hat
sqrt(p_hat * (1 - p_hat) / n)
p_hat <- .52#s / n #
se <- -qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)#
#
c(p_hat - se, p_hat + se)#
s / n + -qnorm(5e-04) * sqrt(p_hat * (1 - p_hat) / n)#
s / n + qnorm(5e-04) * sqrt(p_hat * (1 - p_hat) / n)
p_hat <- .52#s / n #
se <- -qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)#
#
c(p_hat - se, p_hat + se)
round(c(p_hat - se, p_hat + se), 4)
round(c(p_hat - se, p_hat + se), 3)
n <- 153
n <- 153 #
s <- 52#
#
p_hat <- .s / n #
se <- -qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)#
#
round(c(p_hat - se, p_hat + se), 3)
n <- 153 #
s <- 52#
#
p_hat <- s / n #
se <- -qnorm(.001/2) * sqrt(p_hat * (1 - p_hat) / n)#
#
round(c(p_hat - se, p_hat + se), 3)
n <- 179
p_hat <- .162
n <- 179 #
s <- 52#
alpha <- .99
p_hat <- .162
se <- -qnorm((1-alpha)/2) * sqrt(p_hat * (1 - p_hat) / n)
round(c(p_hat - se, p_hat + se), 3)
qnorm((1-alpha)/2)
-qnorm((1-alpha)/2) * sqrt(p_hat * (1 - p_hat) / n)
p_hat <- .162
round(c(p_hat - se, p_hat + se), 3)
qnorm((1-alpha)/2)
sample(c("Lady and the Tramp", "Peter Pan"),1)
?I
12 - 10
2 /(2/10)
2/10
5 * (10.5 - 10)
qnorm(2.5)
?qnorm
pnorm(2.5)
5 * (10.25 - 10)
pnorm(5 * (10.25 - 10))
.7 * .3
(.7 * .3)/50
sqrt((.7 * .3)/50)
(.7 * .3)/50
pnorm((.75 - .5)/sqrt(.7*(1 -.7)/50))
pnorm((.75 - .5)/sqrt(.7*(1 -.7)/30))
pnorm((.75 - .5)/sqrt(.7*(1 -.7)/10))
pnorm((.75 - .5)/sqrt(.7*(1 -.7)/5))
pnorm((.75 - .5)/sqrt(.7*(1 -.7)/1))
pnorm((.75 - .5)/sqrt(.7*(1 -.7)/50))
/sqrt(.7*(1 -.7)/50))
sqrt(.7*(1 -.7)/50))
sqrt(.7*(1 -.7)/50)
1/sqrt(.7*(1 -.7)/50)
.75 - .5
.75 - .7
.75 - .74
().71 - .7)/sqrt(.7*(1-.7)/50)
(.71 - .7)/sqrt(.7*(1-.7)/50)
1 - (.71 - .7)/sqrt(.7*(1-.7)/50)
1 - (.75 - .7)/sqrt(.7*(1-.7)/50)
(.75 - .7)/sqrt(.7*(1-.7)/50)
(.8 - .7)/sqrt(.7*(1-.7)/50)
1 0 (.8 - .7)/sqrt(.7*(1-.7)/50)
1 - (.8 - .7)/sqrt(.7*(1-.7)/50)
pnorm((.71 - .7)/sqrt(.7*(1-.7)/50))
1 - pnorm((.71 - .7)/sqrt(.7*(1-.7)/50))
pnorm((2.9 - 3)/(.2/sqrt(50)))
(2.9 - 3)/(.2/sqrt(50))
(.75 - .82)/(.82*(1 - .82)/100)
(.75 - .82)/sqrt(.82*(1 - .82)/100)
(.75 - .82)/.038
(.73 - .8)/sqrt(.8*.2/100)
pnorm(-1/75)
pnorm(-1.75)
2*pnorm(-1.75)
.76 + pnorm(.05/2)*sqrt(.76*(1 - .76)/100)
.76 - pnorm(.05/2)*sqrt(.76*(1 - .76)/100)
pt(-1.77, 49)
2*pt(-1.77, 49)
qt(.025, 49)
qt(.05, 49)
qnorm(.05)
2*pnorm(-1.77)
(295 - 300)/(20/sqrt(20))
(295 - 300)/(15/sqrt(20))
qt(.01, 19)
pt(.01/2, 19)
2*pt(.01/2, 19)
2*pt(1.491, 19)
pt(1.491, 19)
pt(-1.491, 19)
2*pt(-1.491, 19)
qchisq(.025, 24)
qchisq(1-.025, 24)
a <- c(791.2, 792.8, 792.3, 793.6, 792.3, 790.3)#
b <- c(798.9, 790.9, 795.8, 792.9, 798.5, 790)
d <- a - b
d
mean(d)
dbar <- mean(d)
d <- a - b
d
dbar
sum(d)
d^2
var(d)
sum(d^2)
1/5 *(114.17 - (-14.5/6)^2)
sd(d)
sqrt(1/5 *(114.17 - (-14.5/6)^2))
d
sd(d)
sqrt(1/5 *(114.17 - (mean(d))^2))
sqrt(1/5 *(sum(d^2) - (mean(d))^2))
sd(d)
sum(d)^2
sqrt(1/5 * (114.17 - 6*mean(d)^2))
mean(d) /(sd(d)/sqrt(6))
mu_x <- 80 #
var_x <- 64 #
sd_x <- 8#
#
mu_y <- 78 #
var_y <- 100#
sd_y <- 10#
#
r <- .6
b1 <- r*sd_y/sd_x
b0 <- mu_y - b1*mu_x
b1
b0 <- mu_y - b1*mu_x
b0
r^2
.libPaths()
setwd('/Users/benjamindraves/Documents/Work/github/BJSE/two_dim_BV_tradeoff/code/')#
source('basic_functions.R')#
source('model_setup_ER_to_SBM.R')#
source('theoretical_mse_functions.R')
comm_ids <- rep(1:2, each = net_size/2)
X <- L[comm_ids, ]
Xc <- X %*% sqrt(C(t[j]))
Lc <- L %*% sqrt(C(t[j]))
Lc
Lc <- function(j) L %*% sqrt(C(t[j]))
Lc(1)
Lc(0)
Lc(1)
Lc(25)
mat <- matrix(NA, ncol = 3, nrow = 2*length(t))  #
 for(j in 1:length(t)){#
 	mmat[(2*j-1):(2*j),] <- cbind(Lc(j), c(t[j], t[j]))#
 }
mat <- matrix(NA, ncol = 3, nrow = 2*length(t))  #
 for(j in 1:length(t)){#
 	mat[(2*j-1):(2*j),] <- cbind(Lc(j), c(t[j], t[j]))#
 }
mat
mat <- matrix(NA, ncol = 4, nrow = 2*length(t))
for(j in 1:length(t)){
mat <- matrix(NA, ncol = 4, nrow = 2*length(t))  #
 for(j in 1:length(t)){#
 	mat[(2*j-1):(2*j),] <- cbind(Lc(j), c(t[j], t[j]), 1:2)#
 }
library(ggplot2)
colnames(mat) <-  c('X', 'Y', 't', 'graph')
ggplot(as.data.frame(mat), aes(X, Y, col = t, group = graph)) + geom_point(alpha = 1) +
ggplot(as.data.frame(mat), aes(X, Y, col = t, group = graph)) + geom_point(alpha = 1) + #
 geom_line(group = vars())
library(ggplot2) #
 ggplot(as.data.frame(mat), aes(X, Y, col = t, group = graph)) + geom_point(alpha = .1) + #
 geom_line()
Lc(t[25])
Lc(t[26])
Lc(t[27])
Lc(t[4])
t
length(t)
Lc(t[25])
t[25]
Lc(0.96)
sqrt(C(t[j]))
j
t
C(0)
C(1)
library(ggplot2) #
 ggplot(as.data.frame(mat), aes(X, Y, col = t, group = graph)) + geom_point(alpha = .1) + #
 geom_line()
