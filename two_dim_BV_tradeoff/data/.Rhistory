#----------------------
#   ASE MSE
#----------------------
#embedd individually
X_hat.here <- ase(A1, 2)
Y_hat.here <- ase(A2, 2)
#align matrices
X_hat <- procrustes(X_hat.here, X)$X.new
Y_hat <- procrustes(Y_hat.here, Xc)$X.new
#getrowise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(Y_hat - Xc, 1, get_mse)
#get average mse for each group and in graph 1
#ase_comm1_mse1 <- mean(X_mse[samp == 1])
#ase_comm2_mse1 <- mean(X_mse[samp == 2])
ase_comm1_mse1 <- X_mse[samp == 1][1,]
ase_comm2_mse1 <- X_mse[samp == 2][1,]
#get average mse for each group and in graph 2
#ase_comm1_mse2 <- mean(Y_mse[samp == 1])
#ase_comm2_mse2 <- mean(Y_mse[samp == 2])
ase_comm1_mse2 <- Y_mse[samp == 1][1,]
ase_comm2_mse2 <- Y_mse[samp == 2][1,]
#----------------------
#   Abar MSE
#----------------------
#embedd A bar
X_hat.here <- ase((A1 + A2)/2, 2)
#align matrices
X_hat <- procrustes(X_hat.here, X)$X.new
#get rowwise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(X_hat - Xc, 1, get_mse)
#get average mse for each group and in graph 1
#abar_comm1_mse1 <- mean(X_mse[samp == 1])
#abar_comm2_mse1 <- mean(X_mse[samp == 2])
abar_comm1_mse1 <- X_mse[samp == 1][1,]
abar_comm2_mse1 <- X_mse[samp == 2][1,]
#get average mse for each group and in graph 2
#abar_comm1_mse2 <- Y_mse[1,]mean(Y_mse[samp == 1])
#abar_comm2_mse2 <- mean(Y_mse[samp == 2])
abar_comm1_mse2 <- Y_mse[samp == 1][1,]
abar_comm2_mse2 <- Y_mse[samp == 2][1,]
#----------------------
#   Omni MSE
#----------------------
#construct Omni + embed
Atil <- make_omni(A1, A2)
L_hat.here <- ase(Atil, 2)
#align matrices
L_hat <- procrustes(L_hat.here, X.scaled)$X.new
X_hat <- L_hat[1:(net_size[i]),]
Y_hat <- L_hat[(net_size[i]+1):(2*net_size[i]),]
#getrowise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(Y_hat - Xc, 1, get_mse)
#get average mse for each group and in graph 1
#omni_comm1_mse1 <- mean(X_mse[samp == 1])
#omni_comm2_mse1 <- mean(X_mse[samp == 2])
omni_comm1_mse1 <- X_mse[samp == 1][1,]
omni_comm2_mse1 <- X_mse[samp == 2][1,]
#get average mse for each group and in graph 2
#omni_comm1_mse2 <- mean(Y_mse[samp == 1])
#omni_comm2_mse2 <- mean(Y_mse[samp == 2])
omni_comm1_mse2 <- Y_mse[samp == 1][1,]
omni_comm2_mse2 <- Y_mse[samp == 2][1,]
#----------------------
#   Omnibar MSE
#----------------------
#get average
Lmean <- .5*(X_hat + Y_hat)
#get rowwise mse
X_mse <- apply(Lmean - X, 1, get_mse)
Y_mse <- apply(Lmean - Xc, 1, get_mse)
#get average mse for each group and in graph 1
#omnibar_comm1_mse1 <- mean(X_mse[samp == 1])
#omnibar_comm2_mse1 <- mean(X_mse[samp == 2])
omnibar_comm1_mse1 <- X_mse[samp == 1][1,]
omnibar_comm2_mse1 <- X_mse[samp == 2][1,]
#get average mse for each group and in graph 2
#omnibar_comm1_mse2 <- mean(Y_mse[samp == 1])
#omnibar_comm2_mse2 <- mean(Y_mse[samp == 2])
omnibar_comm1_mse2 <- Y_mse[samp == 1][1,]
omnibar_comm2_mse2 <- Y_mse[samp == 2][1,]
#----------------------
#   Store Results
#----------------------
df[here, ] <- c(k, #simulation number
net_size[i], #network size
t[j], #store which C we're on
#     Mean Squared Errors
ase_comm1_mse1, ase_comm2_mse1, ase_comm1_mse2, ase_comm2_mse2, # ASE
abar_comm1_mse1, abar_comm2_mse1, abar_comm1_mse2, abar_comm2_mse2, # Abar
omni_comm1_mse1, omni_comm2_mse1, omni_comm1_mse2, omni_comm2_mse2, # Omni
omnibar_comm1_mse1, omnibar_comm2_mse1,
omnibar_comm1_mse2, omnibar_comm2_mse2 # Omnibar
)
#update counter
here <- here + 1
#print update
print(k)
}
}
}
#--------------------------------------
#
#       Multidimensional MSE
#           Simulations
#
#--------------------------------------
#sampling functions
getP <- function(X) tcrossprod(X)
sampBern <- function(p) rbinom(1,1,p)
sampP <- function(P){
A <- apply(P, c(1,2), sampBern)
A[lower.tri(A)] <- t(A)[lower.tri(A)]
diag(A) <- 0
A
}
#estimating functions
H <- function(g,m){
ones <- rep(1, m)
e <- diag(m)[,g]
.5 * (tcrossprod(ones,e) + tcrossprod(e,ones))
}
H1 <- function(x){
ones <- rep(1, length(x))
.5 * (tcrossprod(ones,x) + tcrossprod(x,ones))
}
make_omni <- function(A,B,C){
kronecker(H(1,2), A) + kronecker(H(2,2), B)
}
norm2 <- function(u){
sqrt(sum(u^2))
}
normalize.cols<- function(A){
norm.vec <- function(u) u/norm2(u) #define vector normalization func.
if(ncol(A) == 1) return(norm.vec(A[,1]))
apply(A, 2, norm.vec) # vectorize
}
ase <- function(A,d){
E <- eigen(A)
U <- normalize.cols(as.matrix(E$vectors[,1:d], ncol = d))
S <- diag(x = sign(E$values[1:d]), ncol = d, nrow = d)*diag(sqrt(abs(E$values[1:d])), nrow = d, ncol = d)
U %*% S
}
#clustering functions
get_mc <- function(x, true){
n <- length(x)
mc1 <- sum(abs(x - samp))
mc2 <- sum(abs(ifelse(x == 1, 2, 1) - samp))
return(min(c(mc1/n, mc2/n)))
}
#vector mse functions (assumed x centered)
get_mse <- function(x){
sum(x^2)
}
#-----------------------------------------
#
#    Set up of Base Model
#
#-----------------------------------------
#set up blocks
B <- matrix(c(.25, .05, .05, .25), byrow = T, nrow = 2)
b_ase <- ase(B, 2)
#get latent positions
x1 <- b_ase[1,]; x2 <- b_ase[2,]
#set prior probabilities
pi <- .5
#get rotation (eigenvectors of Delta)
Delta <- pi * tcrossprod(x1) + (1 - pi)*tcrossprod(x2)
R <- eigen(Delta)$vectors
#Apply rotation to x1 and x2
x1_til <- t(R) %*% x1
x2_til <- t(R) %*% x2
#set base latent positions
L <- rbind(t(x1_til), t(x2_til))
#-----------------------------------------
#
#     Set up C values
#
#-----------------------------------------
#converges to ER with p = .3 (1,1) --> (2,0)
C <- function(t){
diag(c(t + 1, -t + 1))
}
#-----------------------------------------
#
#    Set up Bias matrices
#
#-----------------------------------------
S <- function(C){
#bias matrices
v1 <- c(1, C[1,1])
v2 <- c(1, C[2,2])
#get embeddings
a1 <- ase(H1(v1), 1)[,1]
a2 <- ase(H1(v2), 1)[,1]
#define scaling matrices
S1 <- abs(diag(c(a1[1], a2[1])))
S2 <- abs(diag(c(a1[2], a2[2])))
#return results
return(list(S1, S2))
}
#-----------------------------------------
#
#     Set up Community
#     Detection Simulation
#
#-----------------------------------------
#set up base parameters
net_size <- 250
t <- seq(0, 1, length.out = 11)[-11]
mc_runs <- 50 #number of iterations
#load aligning packages
require(MCMCpack)
#set up storage
here <- 1
df <- matrix(NA, nrow = length(net_size)*length(t)*mc_runs, ncol = 19)
colnames(df) <- c("sim_number","net_size", "t",
"ase11", "ase21", "ase12", "ase22",
"abar11", "abar21", "abar12", "abar22",
"omni11", "omni21", "omni12", "omni22",
"omnibar11", "omnibar21", "omnibar12", "omnibar22")
#set seed
set.seed(1985)
for(i in 1:length(net_size)){
for(j in 1:length(t)){
#sample rows of X
samp <- rep(c(1, 2), each = net_size[i]/2)#sample(1:2, net_size[i], replace = TRUE)
X <- L[samp, ]
Xc <- X %*% sqrt(C(t[j]))
#set up scaled latent positions
X.scaled <- rbind(X, Xc)
#set up P matrices
P1 <- tcrossprod(X)
P2 <- tcrossprod(Xc)
#iterate over mc_runs
for(k in 1:mc_runs){
#sample A1 and A2
A1 <- sampP(P1)
A2 <- sampP(P2)
#----------------------
#   ASE MSE
#----------------------
#embedd individually
X_hat.here <- ase(A1, 2)
Y_hat.here <- ase(A2, 2)
#align matrices
X_hat <- procrustes(X_hat.here, X)$X.new
Y_hat <- procrustes(Y_hat.here, Xc)$X.new
#getrowise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(Y_hat - Xc, 1, get_mse)
#get average mse for each group and in graph 1
#ase_comm1_mse1 <- mean(X_mse[samp == 1])
#ase_comm2_mse1 <- mean(X_mse[samp == 2])
ase_comm1_mse1 <- X_mse[samp == 1][1]
ase_comm2_mse1 <- X_mse[samp == 2][1]
#get average mse for each group and in graph 2
#ase_comm1_mse2 <- mean(Y_mse[samp == 1])
#ase_comm2_mse2 <- mean(Y_mse[samp == 2])
ase_comm1_mse2 <- Y_mse[samp == 1][1]
ase_comm2_mse2 <- Y_mse[samp == 2][1]
#----------------------
#   Abar MSE
#----------------------
#embedd A bar
X_hat.here <- ase((A1 + A2)/2, 2)
#align matrices
X_hat <- procrustes(X_hat.here, X)$X.new
#get rowwise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(X_hat - Xc, 1, get_mse)
#get average mse for each group and in graph 1
#abar_comm1_mse1 <- mean(X_mse[samp == 1])
#abar_comm2_mse1 <- mean(X_mse[samp == 2])
abar_comm1_mse1 <- X_mse[samp == 1][1]
abar_comm2_mse1 <- X_mse[samp == 2][1]
#get average mse for each group and in graph 2
#abar_comm1_mse2 <- Y_mse[1,]mean(Y_mse[samp == 1])
#abar_comm2_mse2 <- mean(Y_mse[samp == 2])
abar_comm1_mse2 <- Y_mse[samp == 1][1]
abar_comm2_mse2 <- Y_mse[samp == 2][1]
#----------------------
#   Omni MSE
#----------------------
#construct Omni + embed
Atil <- make_omni(A1, A2)
L_hat.here <- ase(Atil, 2)
#align matrices
L_hat <- procrustes(L_hat.here, X.scaled)$X.new
X_hat <- L_hat[1:(net_size[i]),]
Y_hat <- L_hat[(net_size[i]+1):(2*net_size[i]),]
#getrowise mse
X_mse <- apply(X_hat - X, 1, get_mse)
Y_mse <- apply(Y_hat - Xc, 1, get_mse)
#get average mse for each group and in graph 1
#omni_comm1_mse1 <- mean(X_mse[samp == 1])
#omni_comm2_mse1 <- mean(X_mse[samp == 2])
omni_comm1_mse1 <- X_mse[samp == 1][1]
omni_comm2_mse1 <- X_mse[samp == 2][1]
#get average mse for each group and in graph 2
#omni_comm1_mse2 <- mean(Y_mse[samp == 1])
#omni_comm2_mse2 <- mean(Y_mse[samp == 2])
omni_comm1_mse2 <- Y_mse[samp == 1][1]
omni_comm2_mse2 <- Y_mse[samp == 2][1]
#----------------------
#   Omnibar MSE
#----------------------
#get average
Lmean <- .5*(X_hat + Y_hat)
#get rowwise mse
X_mse <- apply(Lmean - X, 1, get_mse)
Y_mse <- apply(Lmean - Xc, 1, get_mse)
#get average mse for each group and in graph 1
#omnibar_comm1_mse1 <- mean(X_mse[samp == 1])
#omnibar_comm2_mse1 <- mean(X_mse[samp == 2])
omnibar_comm1_mse1 <- X_mse[samp == 1][1]
omnibar_comm2_mse1 <- X_mse[samp == 2][1]
#get average mse for each group and in graph 2
#omnibar_comm1_mse2 <- mean(Y_mse[samp == 1])
#omnibar_comm2_mse2 <- mean(Y_mse[samp == 2])
omnibar_comm1_mse2 <- Y_mse[samp == 1][1]
omnibar_comm2_mse2 <- Y_mse[samp == 2][1]
#----------------------
#   Store Results
#----------------------
df[here, ] <- c(k, #simulation number
net_size[i], #network size
t[j], #store which C we're on
#     Mean Squared Errors
ase_comm1_mse1, ase_comm2_mse1, ase_comm1_mse2, ase_comm2_mse2, # ASE
abar_comm1_mse1, abar_comm2_mse1, abar_comm1_mse2, abar_comm2_mse2, # Abar
omni_comm1_mse1, omni_comm2_mse1, omni_comm1_mse2, omni_comm2_mse2, # Omni
omnibar_comm1_mse1, omnibar_comm2_mse1,
omnibar_comm1_mse2, omnibar_comm2_mse2 # Omnibar
)
#update counter
here <- here + 1
#print update
print(k)
}
}
}
#------------------------------
#
#       Data Prep
#
#-----------------------------
library(dplyr); library(reshape2)
#melt data frame and add community, graph, and method labels
plotdf <- as.data.frame(df) %>%
melt(id.vars = c("sim_number", "net_size", "t")) %>%
mutate(community = ifelse(variable %in% c("ase11", "ase12","abar11", "abar12","omni11", "omni12","omnibar11", "omnibar12"), "Community 1", "Community 2"),
graph = ifelse(variable %in% c("ase11", "ase21","abar11", "abar21","omni11", "omni21","omnibar11", "omnibar21"), "Graph 1", "Graph 2"),
Method = ifelse(variable %in% c("ase11", "ase21", "ase12", "ase22"), "ASE",
ifelse(variable %in% c("abar11", "abar21", "abar12", "abar22"), "Abar",
ifelse(variable %in% c("omni11", "omni21", "omni12", "omni22"), "Omni", "Omnibar")))) %>%
group_by(net_size, t, community, graph, Method) %>%
summarize(mse_se = sd(value),
average_mse = mean(value)
#,mse_se = sd(value)/sqrt(mc_runs + net_size/2)
) %>%
mutate(mse_se = mse_se/sqrt(mc_runs + net_size/2))
#------------------------------
#
#       Read in data
#             +
#       format data
#
#-----------------------------
setwd("~/Documents/Work/github/BJSE/two_dim_BV_tradeoff/data/")
#replace comm1 == 1, graph == 1, method ase with average across t
params1 <- plotdf %>%
filter(community == "Community 1", graph == "Graph 1", Method == "ASE") %>%
group_by(net_size) %>%
summarize(m = mean(average_mse), s = mean(mse_se))
params2 <- plotdf %>%
filter(community == "Community 2", graph == "Graph 1", Method == "ASE") %>%
group_by(net_size) %>%
summarize(m = mean(average_mse), s = mean(mse_se))
#update graph 1 comm1 parameters
plotdf$average_mse[which(plotdf$community == "Community 1" & plotdf$graph == "Graph 1" & plotdf$Method == "ASE")] <- params1$m
plotdf$mse_se[which(plotdf$community == "Community 1" & plotdf$graph == "Graph 1" &plotdf$Method == "ASE")] <- params1$s
#update graph 1 comm2 parameters
plotdf$average_mse[which(plotdf$community == "Community 2" & plotdf$graph == "Graph 1" & plotdf$Method == "ASE")] <- params2$m
plotdf$mse_se[which(plotdf$community == "Community 2" & plotdf$graph == "Graph 1" &plotdf$Method == "ASE")] <- params2$s
#------------------------------------------------
#
#         Make a priori lines data
#
#------------------------------------------------
#Variance matrices
sigma_2 <- function(y, C, k){
as.numeric(crossprod(y, C %*% L[k,]) - crossprod(y, C %*% L[k,])^2)
}
Sigma_tilde <- function(y, g, C_list){
#set up preliminaries
K <- nrow(L)
d <- ncol(L)
#get sum
tot <- matrix(0,nrow = d, ncol = d)
for(k in 1:K){
tot <- tot + probs[k] * sigma_2(y, C_list[[g]], k) * tcrossprod(L[k,])
}
return(tot)
}
Sigma <- function(y,g,C_list, S_list){
#get S2D_inv
S2D_inv <- solve(.5 * crossprod(L) %*%  Reduce("+", lapply(S_list, function(x) x^2)))
#preliminary values
d <- ncol(L)
m <- length(C_list)
#first summand
tot1 <- (S_list[[g]] + Reduce("+",S_list)) %*% Sigma_tilde(y, g, C_list) %*% (S_list[[g]] + Reduce("+",S_list))
#second summard
tot2 <- matrix(0, nrow = d, ncol = d)
for(k in (1:m)[-g]){
tot2 <- tot2 + S_list[[k]] %*% Sigma_tilde(y, k, C_list) %*% S_list[[k]]
}
#return covariance matrix
return(.25 * S2D_inv %*% (tot1 + tot2) %*% S2D_inv)
}
#make apriori lines
apriori <- as.data.frame(matrix(NA, ncol = 7, nrow = 4 * length(t)))
here <-  1
colnames(apriori)[4:7] <- c("Abar", "ASE", "Omni", "Omnibar")
#plot figure
library(ggplot2)
ggplot() +
geom_point(aes(t, average_mse, col = Method), plotdf, alpha = .5)+
geom_line(aes(t, average_mse, col = Method), plotdf)+
#geom_line(aes(t, MSE, col = Method), apriori_mse%>% filter(Method == "Omni"), linetype = "dashed")+
facet_grid(rows = vars(graph),
cols = vars(community))+
geom_ribbon(aes(t, ymin = average_mse - 1.96*mse_se,
ymax = average_mse + 1.96*mse_se),
plotdf%>% filter(Method == "Omni"), alpha=0.1, linetype = 0)+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "Deviation from SBM (x = 0) to ER (x = 1)")
plotdf
df
plotdf
ggplot() +
geom_point(aes(t, average_mse, col = Method), plotdf, alpha = .5)+
geom_line(aes(t, average_mse, col = Method), plotdf)+
#geom_line(aes(t, MSE, col = Method), apriori_mse%>% filter(Method == "Omni"), linetype = "dashed")+
facet_grid(rows = vars(graph),
cols = vars(community))+
geom_ribbon(aes(t, ymin = average_mse - 1.96*mse_se,
ymax = average_mse + 1.96*mse_se),
plotdf, alpha=0.1, linetype = 0)+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "Deviation from SBM (x = 0) to ER (x = 1)")
ggplot() +
geom_point(aes(t, average_mse, col = Method), plotdf, alpha = .5)+
geom_line(aes(t, average_mse, col = Method), plotdf)+
#geom_line(aes(t, MSE, col = Method), apriori_mse%>% filter(Method == "Omni"), linetype = "dashed")+
facet_grid(rows = vars(graph),
cols = vars(community))+
geom_ribbon(aes(t, ymin = average_mse - 1.96*mse_se,
ymax = average_mse + 1.96*mse_se),
plotdf, alpha=0.1, linetype = 0)+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "Deviation from SBM (x = 0) to ER (x = 1)")
%>% filter(Method == "Omni")
ggplot() +
geom_point(aes(t, average_mse, col = Method), plotdf, alpha = .5)+
geom_line(aes(t, average_mse, col = Method), plotdf)+
#geom_line(aes(t, MSE, col = Method), apriori_mse%>% filter(Method == "Omni"), linetype = "dashed")+
facet_grid(rows = vars(graph),
cols = vars(community))+
geom_ribbon(aes(t, ymin = average_mse - 1.96*mse_se,
ymax = average_mse + 1.96*mse_se),
plotdf%>% filter(Method == "Omni"), alpha=0.1, linetype = 0)+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "Deviation from SBM (x = 0) to ER (x = 1)")
ggplot() +
geom_point(aes(t, average_mse, col = Method), plotdf, alpha = .5)+
geom_line(aes(t, average_mse, col = Method), plotdf)+
#geom_line(aes(t, MSE, col = Method), apriori_mse%>% filter(Method == "Omni"), linetype = "dashed")+
facet_grid(rows = vars(graph),
cols = vars(community))+
geom_ribbon(aes(t, ymin = average_mse - 1.96*mse_se,
ymax = average_mse + 1.96*mse_se),
plotdf, alpha=0.1, linetype = 0)+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "Deviation from SBM (x = 0) to ER (x = 1)")
ggplot() +
geom_point(aes(t, average_mse, col = Method), plotdf, alpha = .5)+
geom_line(aes(t, average_mse, col = Method), plotdf)+
geom_line(aes(t, MSE, col = Method), apriori_mse%>% filter(Method == "Omni"), linetype = "dashed")+
facet_grid(rows = vars(graph),
cols = vars(community))+
geom_ribbon(aes(t, ymin = average_mse - 1.96*mse_se,
ymax = average_mse + 1.96*mse_se),
plotdf, alpha=0.1, linetype = 0)+
theme_bw()+
scale_y_log10()+
labs(y = expression(paste('log'[10], "(MSE)")),
x = "Deviation from SBM (x = 0) to ER (x = 1)")
probs
